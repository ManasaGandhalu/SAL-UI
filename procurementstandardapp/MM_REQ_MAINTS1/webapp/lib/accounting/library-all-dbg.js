// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.s2p.mm.lib.reuse.accounting.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.s2p.mm.lib.reuse.accounting.component.Component') ) {
  jQuery.sap.declare('sap.ui.s2p.mm.lib.reuse.accounting.component.Component');
/*
 * Copyright (C) 2009-2017 SAP SE or an SAP affiliate company. All rights reserved.
 */
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained

sap.ui.core.UIComponent.extend("sap.ui.s2p.mm.lib.reuse.accounting.component.Component", {
	metadata: {
		manifest: "json",
		publicMethods: ["updateAccList"],
		properties: {
			sAccEntitySetName: "string", // mandatory 
			sAccEntityTypeName: "string", // mandatory 
			sAccBindingPathEntityType: "string", // mandatory in case if sCurrentView is "details"
			sAccBindingPathEntitySet: "string", // mandatory in case if sCurrentView is "list"
			oModel: "object", // optional in case of smart templates
			bEditMode: "boolean", // mandatory
			bAccDetailsAsPopup: "boolean", // optional , default value is false
			sCurrentView: "string", // either list or details , in case if bAccDetailsAsPopup is true then sCurrentView cannot be details in any case
			bShowListHeader: "boolean" // optional, default value is true

		},
		dependencies: {
			libs: ["sap.m", "sap.ui.s2p.mm.lib.reuse.accounting"],
			components: ["sap.ui.s2p.mm.lib.reuse.accounting.component"]
		},
		events: {
			detailNavigation: {},
			listNavigation: {}
		}
	},

	/******************************************************************************
	 * CreateContent
	 ******************************************************************************/

	createContent: function() {
		// XML
		if (this.oComponentData.sCurrentView === "list") {
			this.page = new sap.ui.view({
				viewName: "sap.ui.s2p.mm.lib.reuse.accounting.component.view.AccountAssignment",
				type: sap.ui.core.mvc.ViewType.XML
			});
			this._setShowHeader(this.oComponentData.bShowListHeader);
		} else {
			this.page = new sap.ui.view({
				viewName: "sap.ui.s2p.mm.lib.reuse.accounting.component.view.AccountAssignmentDetail",
				type: sap.ui.core.mvc.ViewType.XML
			});
		}
		this._setPopDisplay(this.oComponentData.bAccDetailsAsPopup);
		this._setEditMode(this.oComponentData.bEditMode);
		// this.setShowHeader(this.oComponentData.bShowListHeader);

		return this.page;

	},

	_setPopDisplay: function(mode) {
		this.page.getController()._setPopDisplay(mode);
	},

	_setEditMode: function(mode) {
		this.page.getController()._setEditMode(mode);
	},
	_setShowHeader: function(mode) {
		this.page.getController()._setShowHeader(mode);
	},
	updateAccList: function(successFunction, errorFunction, parentController) {
		// Set attribute label
		this.page.getController().updateAccList(successFunction, errorFunction, parentController);
	}

});
}; // end of sap/ui/s2p/mm/lib/reuse/accounting/component/Component.js
if ( !jQuery.sap.isDeclared('sap.ui.s2p.mm.lib.reuse.accounting.component.util.HelperFunctions') ) {
/*
 * Copyright (C) 2009-2017 SAP SE or an SAP affiliate company. All rights reserved.
 */
jQuery.sap.declare('sap.ui.s2p.mm.lib.reuse.accounting.component.util.HelperFunctions'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/s2p/mm/lib/reuse/accounting/component/util/HelperFunctions",function() {
	"use strict";

	var HelperFunctions = {

		/******************************************************************************
		 * SetLayoutProperties
		 * Parameters:  oComponentData
		 *  oView
		 * =============================================================================
		 * Set layout properties according to component properties:
		 * - HorizontalLayout
		 * - Editable
		 * - ProfitabilityAssignemntEnabled
		 ******************************************************************************/

		setLayoutProperties: function(oView) {

			// Set Style (use HorizontalLayout or don't)
			//var vUseHorizontalLayout = oComponentData.useHorizontalLayout;
			this.oSmartForm = oView.byId("accAssignSmartForm");
			if (!this.oSmartForm) {
				this.oSmartForm = sap.ui.getCore().byId("accAssignSmartForm");
			}
			var vUseHorizontalLayout;
			if (vUseHorizontalLayout === true) {
				this.oSmartForm.setUseHorizontalLayout(true);

				// Only set layout if exists
				if (oView.byId("AccGroup")) {
					oView.byId("AccGroup").setUseHorizontalLayout(true);
				}

			} else {
				this.oSmartForm.setUseHorizontalLayout(false);

				// Only set layout if exists

			}

			// Set if coding block is editable
			//var vEditmode = oComponentData.editMode;

			this.oSmartForm.setEditable(true);

		},

		/******************************************************************************
		 * GetAttributesFromMetadata
		 * Parameters: oModel                         Model to be considered
		 * sAccEntityTypeName                            Entity type name
		 * =============================================================================
		 * Returns a list of all attributes of the given EntityTypeName
		 ******************************************************************************/

		getAttributesFromMetadata: function(oModel, sAccEntityTypeName) {
			var oEntityTypeList = oModel.getServiceMetadata().dataServices.schema[0].entityType;

			for (var i = 0; i < oEntityTypeList.length; i++) {
				if (oEntityTypeList[i].name === sAccEntityTypeName) {
					return oEntityTypeList[i].property;
				}
			}
		},

		/******************************************************************************
		 * getAccAssignAnnotationFromMetadata
		 * Parameters: oModel   Model to be considered
		 * sAccEntityTypeName     EntityTypeName (annotation uses it)
		 * vGroupName          Name of the annotation group
		 * =============================================================================
		 * Returns a list of all attributes of the given EntityTypeName
		 ******************************************************************************/

		getAccAssignAnnotationFromMetadata: function(oModel, sAccEntityTypeName, vGroupName) {
			var dataAnnotation;
			var oAnnotationList = oModel.getServiceMetadata().dataServices.schema[0].annotations;
			var aEntityAnnotation = [];
			for (var i = 0; i < oAnnotationList.length; i++) {
				if (oAnnotationList[i].target.indexOf(sAccEntityTypeName) > -1) {
					for (var j = 0; j < oAnnotationList[i].annotation.length; j++) {
						if (oAnnotationList[i].annotation[j].extensions && oAnnotationList[i].annotation[j].extensions[0].name === "Qualifier" &&
							oAnnotationList[i].annotation[j].extensions[0].value === vGroupName) {
							for (var k = 0; k < oAnnotationList[i].annotation[j].record.propertyValue.length; k++) {
								if (oAnnotationList[i].annotation[j].record.propertyValue[k].property === "Data") {
									dataAnnotation = oAnnotationList[i].annotation[j].record.propertyValue[k].collection.record;
									return dataAnnotation;
								}
							}
						}
					}
				}
			}
			//Annotation as per smart templates
			if (!dataAnnotation) {
				oAnnotationList = oModel.getServiceAnnotations();
				var oEntityAnnotation = {};
				var entityTypeName = sAccEntityTypeName;
				for (var prop in oAnnotationList) {
					if (prop.search(entityTypeName) !== -1) {
						oEntityAnnotation = oAnnotationList[prop];
						break;
					}
				}
				for (var property in oEntityAnnotation) {
					if (((property.search("FieldGroup") !== -1) && (property.search(vGroupName) !== -1)) || (property.search("Identification") !== -1)) {
						if (oEntityAnnotation[property].Data) {
							aEntityAnnotation.push(oEntityAnnotation[property].Data);
						}
						//else {
						//	aEntityAnnotation.push(oEntityAnnotation[property]);
						//}
					}
				}

				return aEntityAnnotation;
			}

		},

		/******************************************************************************
		 * getKeyFromPath
		 * Parameters:  sPath
		 * =============================================================================
		 * Get key from path
		 ******************************************************************************/

		getKeyFromPath: function(sPath) {
			var aKey = [];

			var tmp = sPath.split("(");
			tmp = tmp[1].split(")");
			var aKeyStrings = tmp[0].split(",");

			for (var i = 0; i < aKeyStrings.length; i++) {
				tmp = aKeyStrings[i].split("=");
				var sKeyName = String(tmp[0]);
				var sKeyValue = String(tmp[1].replace("'", "").replace("'", ""));

				aKey.push([sKeyName, sKeyValue]);
			}

			return aKey;
		},

		/******************************************************************************
		 * GetUrlParametersFromKeyArray
		 * Parameters:  aKey
		 * =============================================================================
		 * Get key from path
		 ******************************************************************************/

		getUrlParametersFromKeyArray: function(aKey) {

			var sUrlParameters = '{';
			for (var i = 0; i < aKey.length; i++) {
				sUrlParameters = sUrlParameters + '"' + aKey[i][0] + '" : "' + aKey[i][1] + '"';
				if (i < aKey.length - 1) {
					sUrlParameters = sUrlParameters + ',';
				} else {
					sUrlParameters = sUrlParameters + '}';
				}
			}

			return JSON.parse(sUrlParameters);
		},

		/******************************************************************************
		 * GetKeyStringFromKeyJSON
		 * Parameters:  oKeyJSON
		 * =============================================================================
		 * Get Key String from Key JSON
		 ******************************************************************************/

		getKeyStringFromKeyJSON: function(oKeyJSON) {

			var aKey = [];
			for (var element in oKeyJSON) {
				aKey.push([element, oKeyJSON[element]]);
			}

			var vKey = aKey[0][0] + "='" + aKey[0][1] + "'";
			for (var i = 1; i < aKey.length; i++) {
				vKey = vKey + "," + aKey[i][0] + "='" + aKey[i][1] + "'";
			}

			return vKey;
		},

		/******************************************************************************
		 * ReplaceAll
		 * Parameters:  target
		 * =============================================================================
		 * Replace All
		 ******************************************************************************/

		replaceAll: function(target, replacement) {
			return this.split(target).join(replacement);
		},

		/******************************************************************************
		 * ContainsVisibleAttribute
		 * Parameters:  oGroup          Group for which it is checked if at least one
		 *                               attribute is visible
		 * =============================================================================
		 * Check if at least one attribute is visible
		 ******************************************************************************/

		containsVisibleAttribute: function(oGroup) {
			var oGroupElements = oGroup.getGroupElements();

			for (var i = 0; i < oGroupElements.length; i++) {
				if (oGroupElements[i].getVisible()) {
					return true;
				}
			}
			return false;
		},

		/******************************************************************************
		 * ClearAttributes
		 * Parameters:  oGroup          Group for which attributes shall be cleared
		 * =============================================================================
		 * Clears ALL attributes in the Coding Block form
		 ******************************************************************************/

		clearAttributes: function(oGroup) {
			if (oGroup && oGroup.getGroupElements().length > 0) {
				oGroup.destroyGroupElements();
			}
		}
	};

	return HelperFunctions;

}, /* bExport= */ true);
}; // end of sap/ui/s2p/mm/lib/reuse/accounting/component/util/HelperFunctions.js
if ( !jQuery.sap.isDeclared('sap.ui.s2p.mm.lib.reuse.accounting.controls.ExampleRenderer') ) {
/*
 * Copyright (C) 2009-2017 SAP SE or an SAP affiliate company. All rights reserved.
 */
jQuery.sap.declare('sap.ui.s2p.mm.lib.reuse.accounting.controls.ExampleRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/s2p/mm/lib/reuse/accounting/controls/ExampleRenderer",['jquery.sap.global'],

	function(jQuery) {
		"use strict";

		/**
		 * Example renderer.
		 * @namespace
		 */
		var ExampleRenderer = {};

		/**
		 * Renders the HTML for the given control, using the provided
		 * {@link sap.ui.core.RenderManager}.
		 *
		 * @param {sap.ui.core.RenderManager} oRm
		 *            the RenderManager that can be used for writing to
		 *            the Render-Output-Buffer
		 * @param {sap.ui.core.Control} oControl
		 *            the control to be rendered
		 */
		ExampleRenderer.render = function(oRm, oControl) {

			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addClass("sapRULTExample");
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(oControl.getText());
			oRm.write("</div>");

		};

		return ExampleRenderer;

	}, /* bExport= */ true);
}; // end of sap/ui/s2p/mm/lib/reuse/accounting/controls/ExampleRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.s2p.mm.lib.reuse.accounting.library') ) {
/*
 * Copyright (C) 2009-2017 SAP SE or an SAP affiliate company. All rights reserved.
 */
/**
 * Initialization Code and shared classes of library sap.ui.s2p.mm.lib.reuse.accounting.
 */
jQuery.sap.declare('sap.ui.s2p.mm.lib.reuse.accounting.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ui/s2p/mm/lib/reuse/accounting/library",["jquery.sap.global",
		"sap/ui/core/library"
	], // library dependency
	function(jQuery) {

		"use strict";

		/**
		 *
		 *
		 * @namespace
		 * @name sap.ui.s2p.mm.lib.reuse.accounting
		 * @author SAP SE
		 * @version 4.0.9
		 * @public
		 */

		// delegate further initialization of this library to the Core
		sap.ui.getCore().initLibrary({
			name: "sap.ui.s2p.mm.lib.reuse.accounting",
			version: "4.0.9",
			dependencies: ["sap.ui.core"],
			types: [],
			interfaces: [],
			controls: [],
			elements: []
		});

		return sap.ui.s2p.mm.lib.reuse.accounting;

	}, /* bExport= */ true);
}; // end of sap/ui/s2p/mm/lib/reuse/accounting/library.js
if ( !jQuery.sap.isDeclared('sap.ui.s2p.mm.lib.reuse.accounting.component.controller.AccountAssignment.controller') ) {
/*
 * Copyright (C) 2009-2017 SAP SE or an SAP affiliate company. All rights reserved.
 */
jQuery.sap.declare('sap.ui.s2p.mm.lib.reuse.accounting.component.controller.AccountAssignment.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
sap.ui.define("sap/ui/s2p/mm/lib/reuse/accounting/component/controller/AccountAssignment.controller",["sap/ui/core/mvc/Controller",
		"sap/m/Dialog",
		"sap/ui/s2p/mm/lib/reuse/accounting/component/util/HelperFunctions"

	],
	function(Controller, Dialog) {
		"use strict";

		return Controller.extend("sap.ui.s2p.mm.lib.reuse.accounting.component.controller.AccountAssignment", {

			/**
			 * Called when a controller is instantiated and its View controls (if available) are already created.
			 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
			 * @memberOf sap.ui.s2p.mm.accassignment.lib.reuse.src.sap.ui.s2p.mm.accassignment.lib.reuse.component.view.AccountAssignment
			 */
			onInit: function() {
				this.oi18nModel = new sap.ui.model.resource.ResourceModel({
					bundleName: "sap.ui.s2p.mm.lib.reuse.accounting.messagebundle",
					bundleLocale: sap.ui.getCore().getConfiguration().getFormatLocale()
				});
				// Texts
				this.getView().setModel(this.oi18nModel, "i18n");
				this.oTextBundle = this.oi18nModel.getResourceBundle();
				this.accAssignMetadata = [
					[],
					[]
				];
				this.bAccDetailsAsPopup = null;
				this.EditMode = null;
				this.ShowHeader = null;
				this.oDialog = null;
				this.sAccEntitySetName = this.getOwnerComponent().oComponentData.sAccEntitySetName;
				this.sAccTableBindingPath = this.getOwnerComponent().oComponentData.sAccBindingPathEntitySet;
				this.oModel = "";
				if (this.getOwnerComponent().oComponentData.oModel) {
					this.oModel = this.getOwnerComponent().oComponentData.oModel;
				} else {
					this.oModel = this.getView().getModel();
				}
			},

			/******************************************************************************
			 * _setDetailsButtonVisibility
			 * Parameters: oValue                         Boolean Value based on bAccDetailsAsPopup
			 * =============================================================================
			 * Sets the details button visibility
			 ******************************************************************************/
			_setDetailsButtonVisibility: function(oValue) {
				this.getView().byId("detailsButton").setVisible(oValue);
			},
			/******************************************************************************
			 * _showNavigationButton
			 * =============================================================================
			 * Sets the navigation property for a column based on UIMode
			 ******************************************************************************/

			_showNavigationButton: function() {
				this.getView().byId("accountColumn").setType("Navigation");
			},

			/******************************************************************************
			 * _showListCRUDActions
			 * =============================================================================
			 * Sets the add and delete button based on EditMode
			 ******************************************************************************/

			_showListCRUDActions: function() {
				this.getView().byId("addButton").setEnabled(this.EditMode);
				this.getView().byId("deleteButton").setEnabled(this.EditMode);

			},
			/******************************************************************************
			 * _showListHeader
			 * =============================================================================
			 * Sets the header text on the table and its count.
			 ******************************************************************************/

			_showListHeader: function() {
				if (this.ShowHeader) {
					this.getView().byId("accBasicTable").setHeader(this.oTextBundle.getText("header"));
					this.getView().byId("accBasicTable").setShowRowCount(true);
				}
			},
			onUpdateFinished: function() {
				this.getView().byId("accountingTable").getItems()[0].setSelected(true);
			},

			onBeforeRendering: function() {
				if (this.bAccDetailsAsPopup === true) {
					this._setDetailsButtonVisibility(true);
				}

				if (this.bAccDetailsAsPopup === false) {
					this._showNavigationButton();
					this._setDetailsButtonVisibility(false);
				}
				this._showListCRUDActions();
				this._showListHeader();
				this.getView().byId("accBasicTable").setEditable(this.EditMode);
			},
			/******************************************************************************
			 * _setPopDisplay
			 * Parameters: mode                          Boolean Value based on bAccDetailsAsPopup
			 * =============================================================================
			 * Sets the UIMode of the component.
			 ******************************************************************************/

			_setPopDisplay: function(mode) {
				this.bAccDetailsAsPopup = mode;

			},

			/******************************************************************************
			 * _setEditMode
			 * Parameters: mode                          EditMode as set by the consumer
			 * =============================================================================
			 * Sets the EditMode of the component.
			 ******************************************************************************/
			_setEditMode: function(mode) {
				this.EditMode = mode;
			},

			/******************************************************************************
			 * _setShowHeader
			 * Parameters: mode                          HeaderMode as set by the consumer
			 * =============================================================================
			 * Sets the Visibility of the header.
			 ******************************************************************************/

			_setShowHeader: function(mode) {
				this.ShowHeader = mode;
			},

			/**
			 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
			 * (NOT before the first rendering! onInit() is used for that one!).
			 * @memberOf sap.ui.s2p.mm.accassignment.lib.reuse.src.sap.ui.s2p.mm.accassignment.lib.reuse.component.view.AccountAssignment
			 */
			//            onBeforeRendering: function() {
			//
			//            },

			/**
			 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
			 * This hook is the same one that SAPUI5 controls get after being rendered.
			 * @memberOf sap.ui.s2p.mm.accassignment.lib.reuse.src.sap.ui.s2p.mm.accassignment.lib.reuse.component.view.AccountAssignment
			 */
			onAfterRendering: function() {
				this.getView().setModel(this.oModel);
				this.getView().byId("accBasicTable").setModel(this.oModel);
				this.getView().byId("accBasicTable").setEntitySet(this.sAccEntitySetName);
				this.getView().byId("accBasicTable").setTableBindingPath(this.sAccTableBindingPath);
				this.getView().byId("accBasicTable").setEditable(this.EditMode);

			},

			/******************************************************************************
			 * onDetail
			 * =============================================================================
			 * This is the event for the details buttons and open the details of the accounting
			 * line in a dialog.
			 ******************************************************************************/

			onDetail: function() {
				var lineSelected = this.getView().byId("accountingTable").getSelectedContexts();
				if (lineSelected.length > 0) {
					this.bindingPath = this.getView().byId("accountingTable").getSelectedContexts()[0].getPath();
					this.page = new sap.ui.view({
						viewName: "sap.ui.s2p.mm.lib.reuse.accounting.component.view.AccountAssignmentDetail",
						type: sap.ui.core.mvc.ViewType.XML

					});
					var that = this;
					this.oDialog = new Dialog({
						title: this.oTextBundle.getText("accAssignTitle"),
						content: this.page,
						beginButton: new sap.m.Button({
							text: "Close",
							press: function() {
								that.oDialog.close();
							}
						})
					});
					this.getView().addDependent(this.oDialog);
					this.page.getController().setContextPath(this.bindingPath);
					this.page.getController()._setEditMode(this.EditMode);
					this.page.getController().setOwnerData(this.getOwnerComponent().oComponentData);
					this.oModel.read(this.bindingPath, {
						success: jQuery.proxy(this.onRead, this)
					});
				} else {
					sap.m.MessageToast.show(this.oTextBundle.getText("accErrorMessage"));
				}

			},

			/******************************************************************************
			 * onRead
			 * =============================================================================
			 * This is the success handler event for onDetail function which will open
			 * Pop Up.
			 ******************************************************************************/
			onRead: function() {

				this.oDialog.open();
			},
			/******************************************************************************
			 * onLineItemPressed
			 * Parameters: oEvent       The event fired when clicked the navigation of item
			 * =============================================================================
			 * This is the event for the navigation on the table and open the details of
			 * accounting line in an object page or as defined by the consumer application.
			 ******************************************************************************/
			onLineItemPressed: function(oEvent) {
				var lineSelected = this.getView().byId("accountingTable").getSelectedContexts();
				if (lineSelected.length > 0) {
					var sPath = this.getView().byId("accountingTable").getSelectedContexts()[0].getPath();
					this.getOwnerComponent().fireEvent("detailNavigation", {
						detailEvent: oEvent,
						bindpath: sPath
					});
				} else {
					sap.m.MessageToast.show(this.oTextBundle.getText("accErrorMessage"));
				}
			},

			/******************************************************************************
			 * onCloseDialog
			 * =============================================================================
			 * This is the event for the Close Button in Detail dialog which will close
			 * the Pop Up.
			 ******************************************************************************/
			onCloseDialog: function() {
				this._oDialog.close();

			},
			/******************************************************************************
			 * onCreate
			 * =============================================================================
			 * This is the event for the create button on the Accounting table
			 ******************************************************************************/
			onCreate: function(oEvent) {
				var oEventLocal = oEvent;
				var sUrl = this.sAccTableBindingPath;
				var oData = {
					Quantity: "0.000"
				};
				this.oModel.create(sUrl, oData, {
					success: jQuery.proxy(this.successHandlerCreate, this, oEventLocal),
					error: jQuery.proxy(this.errorHandlerCreate, this)
				});

			},
			/***********************************************************************************
			 * successHandlerCreate
			 * Parameters: oEvent       The event fired when clicked the navigation of item
			 * Parameters: oResponse    The oResponse had the information about the service call
			 * =================================================================================
			 * This is the success handler event for the create button on
			 * the Accounting table
			 ******************************************************************************/
			successHandlerCreate: function(oEvent, oResponse) {
				var sLocation = oResponse.__metadata.uri;
				var result = sLocation.split("/");
				this.bindingPath = "/" + result[result.length - 1];

				if (this.bAccDetailsAsPopup === true) {

					this.onDetailAfterCreate(this.bindingPath);
				}
				if (this.bAccDetailsAsPopup === false) {

					this.onLineItemPressedAfterCreate(oEvent, this.bindingPath);
				}

				this.getView().byId("accountingTable").getModel().refresh();

			},
			/****************************************************************************************
			 * onDetailAfterCreate
			 * Parameters: bindingPath       The bindingPath contains the path of the accounting item
			 * ======================================================================================
			 * This method will be called from success handler event for the create button on
			 * Accouting table
			 ******************************************************************************/
			onDetailAfterCreate: function(bindingPath) {
				this.bindingPath = bindingPath;
				this.page = new sap.ui.view({
					viewName: "sap.ui.s2p.mm.lib.reuse.accounting.component.view.AccountAssignmentDetail",
					type: sap.ui.core.mvc.ViewType.XML

				});
				var oDialog = new Dialog({
					content: this.page,
					beginButton: new sap.m.Button({
						text: "Close",
						press: function() {
							oDialog.close();
						}
					})
				});
				this.getView().addDependent(oDialog);
				this.page.getController().setContextPath(this.bindingPath);
				this.page.getController()._setEditMode(this.EditMode);
				this.page.getController().setOwnerData(this.getOwnerComponent().oComponentData);
				oDialog.open();
			},
			/******************************************************************************
			 * onLineItemPressedAfterCreate
			 * Parameters: oEvent       The event fired when clicked the navigation of item
			 * Parameters: bindingPath  The bindingPath contains the path of the accounting item
			 * =============================================================================
			 * This is the event for the navigation on the table and open the details of
			 * accounting line in an object page or as defined by the consumer application.
			 ******************************************************************************/
			onLineItemPressedAfterCreate: function(oEvent, bindingPath) {
				var sPath = bindingPath;
				this.getOwnerComponent().fireEvent("detailNavigation", {
					detailEvent: oEvent,
					bindpath: sPath
				});
			},
			/******************************************************************************
			 * onDelete
			 * =============================================================================
			 * This is the event for the delete button on the Accounting table
			 ******************************************************************************/
			onDelete: function() {
				var bindingPath = this.getView().byId("accountingTable").getSelectedContexts()[0].getPath();
				this.oModel.remove(bindingPath, {
					batchGroupId: 1,
					changeSetId: 1,
					success: jQuery.proxy(this.successHandlerDelete, this)
				});

			},
			/***********************************************************************************
			 * successHandlerDelete
			 * =================================================================================
			 * This is the success handler event for the delete button on
			 * the Accounting table
			 ******************************************************************************/
			successHandlerDelete: function() {

				var sSuccessMsg = this.oTextBundle.getText("msg_success_delete");
				sap.m.MessageToast.show(sSuccessMsg, {
					duration: 2000
				});
				this.oModel.refresh();
			},
			updateAccList: function(successFunction, errorFunction, parentController) {
				var oModel = this.oModel;
				var accEntityList = [];
				var odata1 = [];
				for (var obj in oModel.oData) {
					if (obj.indexOf(this.sAccEntitySetName) >= 0) {
						accEntityList.push(obj);
					}
				}
				for (var i = 0; i < accEntityList.length; i++) {
					var oData = oModel.getData("/" + accEntityList[i]);
					var prop;
					try {
						if (oData.hasOwnProperty('HasDraftEntity')) {
							delete oData.HasDraftEntity;
						}
						delete oData.DraftAdministrativeDataUUID;
						delete oData.IsActiveEntity;
						delete oData.HasActiveEntity;
						delete oData.MultipleAcctAssgmtDistrPercent;
						delete oData.CompanyCode;
						delete oData.CostElement;
						delete oData.PurReqnAcctDraftUUID;
						delete oData.PurReqnDraftUUID;
						delete oData.PurReqnItemDraftUUID;
						for (prop in oData)
							if (typeof(oData[prop]) === "object") {
								delete oData[prop];
							}
						for (prop in oData) {
							if (prop.search('UxFc') !== -1) {
								delete oData[prop];
							}
						}
						
						odata1.push(this.adjustPayload(oData));
					} catch (e) { //do nothing
					}
					// oModel.update("/" + accEntityList[i], oData, {
					// 	success: jQuery.proxy(this.successHandler, this, successFunction, parentController),
					// 	error: jQuery.proxy(this.errorHandler, this, errorFunction, parentController)
					// });
				}
				
				var length = accEntityList.length;
				var count = 0;
				this.accountObject = {
					length1: length,
					count: count,
					accEntityList: accEntityList,
					oData: odata1,
					errorFunction: errorFunction
				};
				oModel.update("/" + accEntityList[count], odata1[count], {
					success: jQuery.proxy(this.successHandler, this, successFunction, parentController),
					error: jQuery.proxy(this.errorHandler, this, errorFunction, parentController)
				});

			},
			successHandler: function(successFunction, data) {
				this.accountObject.count = this.accountObject.count + 1;
				if (this.accountObject.count >= this.accountObject.length1) {
					successFunction(data);
				} else {
					this.oModel.update("/" + this.accountObject.accEntityList[this.accountObject.count], this.accountObject.oData[this.accountObject.count], {
						success: jQuery.proxy(this.successHandler, this, successFunction, data),
						error: jQuery.proxy(this.errorHandler, this, this.accountObject.errorFunction, data)
					});
				}
				// successFunction(data);

			},
			errorHandler: function(errorFunction, data) {
				errorFunction(data);
			},
			adjustPayload: function(oData) {
				for (var prop in oData) {
					if (prop.search('_fc') < 0) {
						var property = prop.toString() + "_fc";
						if (oData[property] === 1 || oData[property] === 0) {
							delete oData[prop];
							delete oData[property];
						}
					}
				}
				return oData;
			}

			/**
			 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
			 * @memberOf sap.ui.s2p.mm.accassignment.lib.reuse.src.sap.ui.s2p.mm.accassignment.lib.reuse.component.view.AccountAssignment
			 */
			//            onExit: function() {
			//
			//            }
		});
	});
}; // end of sap/ui/s2p/mm/lib/reuse/accounting/component/controller/AccountAssignment.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.s2p.mm.lib.reuse.accounting.component.controller.AccountAssignmentDetail.controller') ) {
/*
 * Copyright (C) 2009-2017 SAP SE or an SAP affiliate company. All rights reserved.
 */
jQuery.sap.declare('sap.ui.s2p.mm.lib.reuse.accounting.component.controller.AccountAssignmentDetail.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/ui/s2p/mm/lib/reuse/accounting/component/controller/AccountAssignmentDetail.controller",["sap/ui/core/mvc/Controller",
		"sap/ui/s2p/mm/lib/reuse/accounting/component/util/HelperFunctions"
	],

	function(Controller, HelperFunctions) {
		"use strict";

		return Controller.extend("sap.ui.s2p.mm.lib.reuse.accounting.component.controller.AccountAssignmentDetail", {

			/**
			 * Called when a controller is instantiated and its View controls (if available) are already created.
			 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
			 * @memberOf src.sap.s2p.mm.lib.reuse.accounting.src.sap.s2p.mm.lib.reuse.accounting.component.view.AccountAssignmentDetail
			 */
			onInit: function() {
				this.oi18nModel = new sap.ui.model.resource.ResourceModel({
					bundleName: "sap.ui.s2p.mm.lib.reuse.accounting.messagebundle",
					bundleLocale: sap.ui.getCore().getConfiguration().getFormatLocale()
				});
				// Texts
				this.getView().setModel(this.oi18nModel, "i18n");
				this.oTextBundle = this.oi18nModel.getResourceBundle();
				this.oView = this.getView();
				this.binded = false;
				this.ownerData = null;
				this.oModel = null;
				this.sAccBindingPathEntityType = null;
				this.accAssignMetadata = [
					[],
					[]
				];
				this.oSmartForm = this.oView.byId("accAssignSmartForm");
				if (!this.oSmartForm) {
					this.oSmartForm = sap.ui.getCore().byId("accAssignSmartForm");
				}
				this.bAccDetailsAsPopup = null;
				this.EditMode = null;

			},
			/******************************************************************************
			 * _setPopDisplay
			 * Parameters: mode                          Boolean Value based on bAccDetailsAsPopup
			 * =============================================================================
			 * Sets the UIMode of the component.
			 ******************************************************************************/
			_setPopDisplay: function(mode) {
				this.bAccDetailsAsPopup = mode;

			},
			/******************************************************************************
			 * _setEditMode
			 * Parameters: mode                          EditMode as set by the consumer
			 * =============================================================================
			 * Sets the EditMode of the component.
			 ******************************************************************************/
			_setEditMode: function(mode) {
				this.EditMode = mode;
			},
			/******************************************************************************
			 * _setBackButtonVisibility
			 * =============================================================================
			 * Set the Visiblity of back button on the Accounting Form.
			 ******************************************************************************/
			_setBackButtonVisibility: function(mode) {
				this.getView().byId("navBack").setVisible(mode);
			},

			/**
			 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
			 * (NOT before the first rendering! onInit() is used for that one!).
			 * @memberOf src.sap.s2p.mm.lib.reuse.accounting.src.sap.s2p.mm.lib.reuse.accounting.component.view.AccountAssignmentDetail
			 */
			onBeforeRendering: function() {

				// var oView = this.getView();
				if (this.bAccDetailsAsPopup === false) {
					this._setBackButtonVisibility(false);
					// this.getView().byId("accountColumn").setType("Navigation");
				}
				if (!this.getOwnerComponent()) {
					this.ownerData = this.ownerData;
				} else {
					this.ownerData = this.getOwnerComponent().oComponentData;
				}
				this.oModel = this.ownerData.oModel;
				if (!this.oModel) {
					this.oModel = this.getView().getModel();
				}
				if (!this.sAccBindingPathEntityType) {
					this.sAccBindingPathEntityType = "/" + this.getOwnerComponent().oComponentData.sAccBindingPathEntityType;
				}
				this.oSmartForm.setEntityType(this.ownerData.sAccEntityTypeName);
				HelperFunctions.setLayoutProperties(this.oView);
				if (this.accAssignMetadata[0].length === 0 && this.accAssignMetadata[1].length === 0) {
					this.accAssignMetadata = this.addAccAssignAttributesFromMetaData(this.oModel, this.oView, this.ownerData.sAccEntityTypeName);
				}
				this.getView().setModel(this.oModel);
				this.oSmartForm.setModel(this.oModel);
				this.oSmartForm.bindElement(this.sAccBindingPathEntityType);
				this.getView().byId("accAssignSmartForm").setEditable(this.EditMode);

			},
			/******************************************************************************
			 * setContextPath
			 * =============================================================================
			 * Set the context path for the accouting line item.
			 ******************************************************************************/
			setContextPath: function(bindingPath) {
				this.sAccBindingPathEntityType = bindingPath;
			},
			/******************************************************************************
			 * NavBack
			 * Parameters: oEvent       The event fired when clicked the back button in Accouting Form
			 * =============================================================================
			 * This is the event for navigate back to the Accouting List
			 ******************************************************************************/
			NavBack: function(oEvent) {
				this.getOwnerComponent().fireEvent("listNavigation", {
					accountingEvent: oEvent
				});

			},
			/******************************************************************************
			 * setOwnerData
			 * =============================================================================
			 * Set the Component Data for this view in case of Pop Up
			 ******************************************************************************/
			setOwnerData: function(odata) {
				this.ownerData = odata;
			},
			/******************************************************************************
			 * addAccAssignAttributesFromMetaData
			 * Parameters: oModel   			The oModel has the oData model
			 * Parameters: oView    			The oView has the view details
			 * Parameters: vEntityTypeName  	The vEntityTypeName has the entity type name
			 * =============================================================================
			 * Read the annotation by the given Id in respective entity type
			 ******************************************************************************/
			addAccAssignAttributesFromMetaData: function(oModel, oView, vEntityTypeName) {

				// Get metadata attributes
				var oAttributesFromMetadata = HelperFunctions.getAttributesFromMetadata(oModel, vEntityTypeName);
				var oAccAssignGroupAttributes = HelperFunctions.getAccAssignAnnotationFromMetadata(oModel, vEntityTypeName, "AccGroup");
				var oAccAssignGroupAttributes1 = HelperFunctions.getAccAssignAnnotationFromMetadata(oModel, vEntityTypeName, "SecondGroup");
				var oAccAssignGroupAttributes2 = HelperFunctions.getAccAssignAnnotationFromMetadata(oModel, vEntityTypeName, "ThirdGroup");

				var oGroup = sap.ui.getCore().byId("AccGroup");
				if (!oGroup) {
					oGroup = oView.byId("AccGroup");
				}

				HelperFunctions.clearAttributes(oGroup);

				var oGroup1 = sap.ui.getCore().byId("SecondGroup");
				if (!oGroup1) {
					oGroup1 = oView.byId("SecondGroup");
				}

				HelperFunctions.clearAttributes(oGroup1);

				var oGroup2 = sap.ui.getCore().byId("ThirdGroup");
				if (!oGroup2) {
					oGroup2 = oView.byId("ThirdGroup");
				}

				HelperFunctions.clearAttributes(oGroup2);

				var aAccAssign = [];
				var i, j, k;
				var cnt, propValue, textAvailable;
				//AccGroup
				if (oAccAssignGroupAttributes) {
					if (oAccAssignGroupAttributes.length === 0) {
						oGroup.setVisible(false);
					}
					for (i = 0; i < oAccAssignGroupAttributes.length; i++) {
						textAvailable = false;
						if (oAccAssignGroupAttributes[i].propertyValue) {
							//Text fields need not be added to the smart form as smart fields
							// Remove all the text fields while adding account assingment attributes
							
							if (oAccAssignGroupAttributes[i].propertyValue[0].path.lastIndexOf("_Text") === -1) {
								propValue = oAccAssignGroupAttributes[i].propertyValue[0].path;
								for (cnt = 0; cnt < oAccAssignGroupAttributes.length; cnt++) {
									if (oAccAssignGroupAttributes[cnt].propertyValue[0].path === propValue + "_Text") {
										textAvailable = true;
										break;
									}
								}
								if (textAvailable === true) {
									this.addAccAssignAttribute(oView, oGroup, oAccAssignGroupAttributes[i].propertyValue[0].path, "accAssignGroupElement",
										textAvailable);
								} else {
									this.addAccAssignAttribute(oView, oGroup, oAccAssignGroupAttributes[i].propertyValue[0].path, "accAssignGroupElement");
								}

								aAccAssign.push(oGroup, oAccAssignGroupAttributes[i].propertyValue[0].path);
							}
						} else {
							for (k = 0; k < oAccAssignGroupAttributes[i].length; k++) {
								//if (oAccAssignGroupAttributes[i][k].Value.Path === oAttributesFromMetadata[j].name) {
								//Text fields need not be added to teh smartf form as smart fields
								if (oAccAssignGroupAttributes[i][k].Value.Path.lastIndexOf("_Text") !== oAccAssignGroupAttributes[i][k].Value.Path.length -
									"_Text".length) {
									this.addAccAssignAttribute(oView, oGroup, oAccAssignGroupAttributes[i][k].Value.Path, "accAssignGroupElement");
									aAccAssign.push(oGroup, oAccAssignGroupAttributes[i][k].Value.Path);
								}

								//}
							}
						}

					}
				} else {
					if (oGroup) {
						oGroup.destroy();
					}
				}
				//First Group
				if (oAccAssignGroupAttributes1) {
					if (oAccAssignGroupAttributes1.length === 0) {
						oGroup1.setVisible(false);
					}
					for (i = 0; i < oAccAssignGroupAttributes1.length; i++) {
						if (oAccAssignGroupAttributes1[i].propertyValue) {
							this.addAccAssignAttribute(oView, oGroup1, oAccAssignGroupAttributes1[i].propertyValue[0].path, "accAssignGroupElement");
							aAccAssign.push(oGroup1, oAccAssignGroupAttributes1[i].propertyValue[0].path);
						} else {
							for (k = 0; k < oAccAssignGroupAttributes1[i].length; k++) {
								//if (oAccAssignGroupAttributes[i][k].Value.Path === oAttributesFromMetadata[j].name) {
								//Text fields need not be added to teh smartf form as smart fields
								if (oAccAssignGroupAttributes1[i][k].Value.Path.lastIndexOf("_Text") !== oAccAssignGroupAttributes1[i][k].Value.Path.length -
									"_Text".length) {
									this.addAccAssignAttribute(oView, oGroup1, oAccAssignGroupAttributes1[i][k].Value.Path, "accAssignGroupElement");
									aAccAssign.push(oGroup1, oAccAssignGroupAttributes1[i][k].Value.Path);
								}

								//}
							}
						}

					}
				} else {
					if (oGroup1) {
						oGroup1.destroy();
					}
				}
				//Second group
				if (oAccAssignGroupAttributes2) {
					if (oAccAssignGroupAttributes2.length === 0) {
						oGroup2.setVisible(false);
					}
					for (i = 0; i < oAccAssignGroupAttributes2.length; i++) {
						if (oAccAssignGroupAttributes2[i].propertyValue) {
							this.addAccAssignAttribute(oView, oGroup2, oAccAssignGroupAttributes2[i].propertyValue[0].path, "accAssignGroupElement");
							aAccAssign.push(oGroup2, oAccAssignGroupAttributes2[i].propertyValue[0].path);
						} else {
							for (k = 0; k < oAccAssignGroupAttributes2[i].length; k++) {
								//if (oAccAssignGroupAttributes[i][k].Value.Path === oAttributesFromMetadata[j].name) {
								//Text fields need not be added to teh smartf form as smart fields
								if (oAccAssignGroupAttributes2[i][k].Value.Path.lastIndexOf("_Text") !== oAccAssignGroupAttributes2[i][k].Value.Path.length -
									"_Text".length) {
									this.addAccAssignAttribute(oView, oGroup2, oAccAssignGroupAttributes2[i][k].Value.Path, "accAssignGroupElement");
									aAccAssign.push(oGroup2, oAccAssignGroupAttributes2[i][k].Value.Path);
								}

								//}
							}
						}

					}
				} else {
					if (oGroup2) {
						oGroup2.destroy();
					}
				}

				//                                            } else {
				// for (k = 0; k < oAccAssignGroupAttributes[i].length; k++) {
				//            if (oAccAssignGroupAttributes[i][k].Value.Path === oAttributesFromMetadata[j].name) {
				//                            if (i === 2) {
				//                                            this.addAccAssignAttribute(oView, oGroup, oAttributesFromMetadata[j].name, "accAssignGroupElement");
				//                                            aAccAssign.push(oGroup, oAttributesFromMetadata[j].name);
				//                            } else if (i === 0) {
				//                                            this.addAccAssignAttribute(oView, oGroup1, oAttributesFromMetadata[j].name, "accAssignGroupElement");
				//                                            aAccAssign.push(oGroup1, oAttributesFromMetadata[j].name);
				//                            } else {
				//                                            this.addAccAssignAttribute(oView, oGroup2, oAttributesFromMetadata[j].name, "accAssignGroupElement");
				//                                            aAccAssign.push(oGroup2, oAttributesFromMetadata[j].name);
				//                            }

				//            }
				// }
				// }
				//            }
				// }

				// } 
				// else {
				//            if (oGroup2) {
				//                            oGroup2.destroy();
				//            }
				// }

				return [aAccAssign];
			},

			/******************************************************************************
			 * addAccAssignAttributesFromMetaData
			 * Parameters: oView    		The oView has the view details
			 * Parameters: oGroup  			The oGroup has the group id
			 * Parameters: sAttributeName
			 * Parameters: sGroupPrefix
			 * =============================================================================
			 * Create the smartfield dynamically for the Accounting SmartForm
			 ******************************************************************************/
			addAccAssignAttribute: function(oView, oGroup, sAttributeName, sGroupPrefix, textAvailable) {

				var vViewId = oView.getId();
				var oGroupElement = new sap.ui.comp.smartform.GroupElement();

				var oSmartField = new sap.ui.comp.smartfield.SmartField({
					id: vViewId + "_" + sGroupPrefix + sAttributeName,
					value: "{" + sAttributeName + "}"
				});

				//var oSmartField = new sap.ui.comp.smartfield.SmartField({
				//            id: vViewId + "_" + sGroupPrefix + sAttributeName,
				//            value: "{parts:[{path: '" + sAttributeName + "'},{path:'" + sAttributeName +
				//                            "_Text'}], formatter: 'sap.ui.s2p.mm.lib.reuse.accounting.component.util.formatter.returnText'}"
				//});

				oSmartField.attachEvent("change", this.changeAccounting, this);

				var oConfiguration = new sap.ui.comp.smartfield.Configuration();
				oConfiguration.setDisplayBehaviour("descriptionAndId");
				oSmartField.setConfiguration(oConfiguration);

				oGroupElement.addElement(oSmartField);
				if (this.EditMode === true && textAvailable === true) {
					//var oText = new sap.m.Text({
					//            text: "{" + sAttributeName + "_Text}"
					//});
					var oSmartFieldTxt = new sap.ui.comp.smartfield.SmartField({
						id: vViewId + "_" + sGroupPrefix + sAttributeName + "_Text",
						value: "{" + sAttributeName + "_Text}",
						showLabel: false,
						editable: false
					});
					oGroupElement.addElement(oSmartFieldTxt);
				}
				oGroup.addGroupElement(oGroupElement);
			},

			/******************************************************************************
			 * changeAccounting
			 * =============================================================================
			 * This event will trigger when you change the focus from the smart field
			 * in accouting details
			 ******************************************************************************/
			changeAccounting: function() {
				this.getView().setBusy(true);
				var OData = this.getView().byId("accAssignSmartForm").getBindingContext().getModel().getData(this.getView().byId(
						"accAssignSmartForm")
					.getBindingContext().getPath());
				var prop;
				try {
					delete OData.HasDraftEntity;
					delete OData.DraftAdministrativeDataUUID;
					delete OData.IsActiveEntity;
					delete OData.HasActiveEntity;
					delete OData.MultipleAcctAssgmtDistrPercent;
					delete OData.CompanyCode;
					delete OData.CostElement;
					delete OData.PurReqnAcctDraftUUID;
					delete OData.PurReqnDraftUUID;
					delete OData.PurReqnItemDraftUUID;
					for (prop in OData)
						if (typeof(OData[prop]) === "object") {
							delete OData[prop];
						}
					for (prop in OData) {
						if (prop.search('UxFc') !== -1) {
							delete OData[prop];
						}
					}
				} catch (e) { //do nothing
				}
				this.adjustPayload(OData);
				var oModel = this.getView().byId("accAssignSmartForm").getBindingContext().getModel();

				if (oModel) {
					oModel.update(this.getView().byId("accAssignSmartForm").getBindingContext().getPath(), OData, {
						"success": jQuery.proxy(this.successHandler, this),
						"error": jQuery.proxy(this.errorHandler, this)
					});
				} else {
					this.getView().getModel().update(this.getView().byId("accAssignSmartForm").getBindingContext().getPath(), OData, {
						"success": jQuery.proxy(this.successHandler, this),
						"error": jQuery.proxy(this.errorHandler, this)
					});
				}

			},
			/******************************************************************************
			 * successHandler
			 * =============================================================================
			 * This is the success handle event to update the value of smart field
			 * in accouting details
			 ******************************************************************************/
			successHandler: function() {
				sap.m.MessageToast.show(this.oTextBundle.getText("updateSuccess"));
				this.getView().byId("accAssignSmartForm").getBindingContext().getModel().refresh();
				this.getView().setBusy(false);
			},
			errorHandler: function() {
				//alert("fail");
			},
			adjustPayload: function(oData) {
				for (var prop in oData) {
					if (prop.search('_fc') < 0) {
						var property = prop.toString() + "_fc";
						if (oData[property] === 1 || oData[property] === 0) {
							delete oData[prop];
							delete oData[property];
						}
					}
				}
				return oData;
			}

			/**
			 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
			 * @memberOf src.sap.s2p.mm.lib.reuse.accounting.src.sap.s2p.mm.lib.reuse.accounting.component.view.AccountAssignmentDetail
			 */
			//	onExit: function() {
			//
			//	}
		});
	});
}; // end of sap/ui/s2p/mm/lib/reuse/accounting/component/controller/AccountAssignmentDetail.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.s2p.mm.lib.reuse.accounting.controls.Example') ) {
/*
 * Copyright (C) 2009-2017 SAP SE or an SAP affiliate company. All rights reserved.
 */
// Provides control sap.ui.s2p.mm.lib.reuse.accounting.Example.
jQuery.sap.declare('sap.ui.s2p.mm.lib.reuse.accounting.controls.Example'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/s2p/mm/lib/reuse/accounting/controls/Example",["jquery.sap.global", "./../library", "sap/ui/core/Control"],
	function(jQuery, library, Control) {
		"use strict";
		/**
		 * Constructor for a new Example control.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Some class description goes here.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 4.0.9
		 *
		 * @constructor
		 * @public
		 * @alias sap.ui.s2p.mm.lib.reuse.accounting.controls.Example
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 */
		var Example = Control.extend("sap.ui.s2p.mm.lib.reuse.accounting.controls.Example", {
			metadata: {
				library: "sap.ui.s2p.mm.lib.reuse.accounting",
				properties: {

					/**
					 * text
					 */
					text: {
						type: "string",
						group: "Misc",
						defaultValue: null
					}

				},
				events: {
					/**
					 * Event is fired when the user clicks on the control.
					 */
					press: {}

				}
			}
		});
		return Example;
	}, /* bExport= */ true);
}; // end of sap/ui/s2p/mm/lib/reuse/accounting/controls/Example.js
